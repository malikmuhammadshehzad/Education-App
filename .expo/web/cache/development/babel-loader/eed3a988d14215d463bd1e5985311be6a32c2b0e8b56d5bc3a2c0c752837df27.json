{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Styles from \"./Styles\";\nimport React from \"react\";\nimport Checkbox from \"expo-checkbox\";\nimport { useState } from \"react\";\nimport AppLoading from \"expo-app-loading\";\nimport { useFonts, OpenSans_300Light, OpenSans_400Regular, OpenSans_500Medium, OpenSans_600SemiBold, OpenSans_700Bold, OpenSans_800ExtraBold, OpenSans_300Light_Italic, OpenSans_400Regular_Italic, OpenSans_500Medium_Italic, OpenSans_600SemiBold_Italic, OpenSans_700Bold_Italic, OpenSans_800ExtraBold_Italic } from \"@expo-google-fonts/open-sans\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar contact = function contact(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    userName = _useState2[0],\n    setUserName = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    userPassword = _useState4[0],\n    setUserPassword = _useState4[1];\n  var Submit = function Submit() {\n    if (userName === \"TopG\" && userPassword === \"1534\") {\n      navigation.navigate(\"home\", {\n        myName: `${userName}`\n      });\n    } else {\n      console.log(`Wrong userName or PassWord`);\n    }\n  };\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    agree = _useState6[0],\n    setAgree = _useState6[1];\n  var _useFonts = useFonts({\n      OpenSans_300Light: OpenSans_300Light,\n      OpenSans_400Regular: OpenSans_400Regular,\n      OpenSans_500Medium: OpenSans_500Medium,\n      OpenSans_600SemiBold: OpenSans_600SemiBold,\n      OpenSans_700Bold: OpenSans_700Bold,\n      OpenSans_800ExtraBold: OpenSans_800ExtraBold,\n      OpenSans_300Light_Italic: OpenSans_300Light_Italic,\n      OpenSans_400Regular_Italic: OpenSans_400Regular_Italic,\n      OpenSans_500Medium_Italic: OpenSans_500Medium_Italic,\n      OpenSans_600SemiBold_Italic: OpenSans_600SemiBold_Italic,\n      OpenSans_700Bold_Italic: OpenSans_700Bold_Italic,\n      OpenSans_800ExtraBold_Italic: OpenSans_800ExtraBold_Italic\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 2),\n    fontsLoaded = _useFonts2[0],\n    error = _useFonts2[1];\n  if (!fontsLoaded) {\n    _jsx(AppLoading, {});\n  }\n  return _jsxs(View, {\n    style: Styles.mainContainer,\n    children: [_jsxs(View, {\n      style: Styles.TextContainer,\n      children: [_jsx(Text, {\n        style: Styles.LoginHeading,\n        children: \"LoginPage\"\n      }), _jsx(Text, {\n        style: Styles.LoginText,\n        children: \"You can reach us anytime malik@top-g.com\"\n      })]\n    }), _jsxs(View, {\n      style: Styles.NameContainer,\n      children: [_jsx(Text, {\n        style: Styles.NameText,\n        children: \" Enter your name \"\n      }), _jsx(TextInput, {\n        style: Styles.NameInput,\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        value: userName,\n        onChangeText: function onChangeText(name) {\n          setUserName(name);\n        }\n      })]\n    }), _jsxs(View, {\n      style: Styles.PasswordContainer,\n      children: [_jsx(Text, {\n        style: Styles.PasswordText,\n        children: \" Enter your password \"\n      }), _jsx(TextInput, {\n        style: Styles.PasswordInput,\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        secureTextEntry: true,\n        value: userPassword,\n        onChangeText: function onChangeText(password) {\n          setUserPassword(password);\n        }\n      })]\n    }), _jsxs(View, {\n      style: Styles.CheckboxContainer,\n      children: [_jsx(Checkbox, {\n        value: agree,\n        onValueChange: function onValueChange() {\n          setAgree(!agree);\n        },\n        color: agree ? \"#03A9F5\" : undefined,\n        style: Styles.Checkbox\n      }), _jsx(Text, {\n        style: Styles.CheckboxText,\n        children: \"i have read and agrees with the TC\"\n      })]\n    }), _jsx(TouchableOpacity, {\n      disabled: !agree,\n      style: [agree ? Styles.LoginButton : Styles.LoginBtnWTColor],\n      onPress: function onPress() {\n        Submit();\n      },\n      children: _jsx(Text, {\n        style: [agree ? Styles.LoginBtnText : Styles.LoginBtnWTcolorText],\n        children: \"Login\"\n      })\n    })]\n  });\n};\nexport default contact;","map":{"version":3,"names":["Styles","React","Checkbox","useState","AppLoading","useFonts","OpenSans_300Light","OpenSans_400Regular","OpenSans_500Medium","OpenSans_600SemiBold","OpenSans_700Bold","OpenSans_800ExtraBold","OpenSans_300Light_Italic","OpenSans_400Regular_Italic","OpenSans_500Medium_Italic","OpenSans_600SemiBold_Italic","OpenSans_700Bold_Italic","OpenSans_800ExtraBold_Italic","jsx","_jsx","jsxs","_jsxs","contact","_ref","navigation","_useState","_useState2","_slicedToArray","userName","setUserName","_useState3","_useState4","userPassword","setUserPassword","Submit","navigate","myName","console","log","_useState5","_useState6","agree","setAgree","_useFonts","_useFonts2","fontsLoaded","error","View","style","mainContainer","children","TextContainer","Text","LoginHeading","LoginText","NameContainer","NameText","TextInput","NameInput","autoCapitalize","autoCorrect","value","onChangeText","name","PasswordContainer","PasswordText","PasswordInput","secureTextEntry","password","CheckboxContainer","onValueChange","color","undefined","CheckboxText","TouchableOpacity","disabled","LoginButton","LoginBtnWTColor","onPress","LoginBtnText","LoginBtnWTcolorText"],"sources":["S:/Shehzad Data/React Native/thapa-project/src/Screen/Contact.js"],"sourcesContent":["import { View, Text, TextInput, TouchableOpacity } from \"react-native\";\r\nimport Styles from \"./Styles\";\r\nimport React from \"react\";\r\nimport Checkbox from \"expo-checkbox\";\r\nimport { useState } from \"react\";\r\nimport AppLoading from \"expo-app-loading\";\r\nimport {\r\n  useFonts,\r\n  OpenSans_300Light,\r\n  OpenSans_400Regular,\r\n  OpenSans_500Medium,\r\n  OpenSans_600SemiBold,\r\n  OpenSans_700Bold,\r\n  OpenSans_800ExtraBold,\r\n  OpenSans_300Light_Italic,\r\n  OpenSans_400Regular_Italic,\r\n  OpenSans_500Medium_Italic,\r\n  OpenSans_600SemiBold_Italic,\r\n  OpenSans_700Bold_Italic,\r\n  OpenSans_800ExtraBold_Italic,\r\n} from \"@expo-google-fonts/open-sans\";\r\nconst   contact = ({ navigation }) => {\r\n  const [userName, setUserName] = useState();\r\n  const [userPassword, setUserPassword] = useState();\r\n\r\n  const Submit = () => {\r\n    if (userName === \"TopG\" && userPassword === \"1534\") {\r\n      // console.log(` WellCome  ${userName} `)\r\n      navigation.navigate(\"home\", { myName: `${userName}` });\r\n    } else {\r\n      console.log(`Wrong userName or PassWord`);\r\n    }\r\n  };\r\n\r\n  // console.log(userName)\r\n  // console.log(userPassword)\r\n  const [agree, setAgree] = useState(false);\r\n  let [fontsLoaded, error] = useFonts({\r\n    OpenSans_300Light,\r\n    OpenSans_400Regular,\r\n    OpenSans_500Medium,\r\n    OpenSans_600SemiBold,\r\n    OpenSans_700Bold,\r\n    OpenSans_800ExtraBold,\r\n    OpenSans_300Light_Italic,\r\n    OpenSans_400Regular_Italic,\r\n    OpenSans_500Medium_Italic,\r\n    OpenSans_600SemiBold_Italic,\r\n    OpenSans_700Bold_Italic,\r\n    OpenSans_800ExtraBold_Italic,\r\n  });\r\n  if (!fontsLoaded) {\r\n    <AppLoading />;\r\n  }\r\n  return (\r\n    <View style={Styles.mainContainer}>\r\n      <View style={Styles.TextContainer}>\r\n        <Text style={Styles.LoginHeading}>LoginPage</Text>\r\n        <Text style={Styles.LoginText}>\r\n          You can reach us anytime malik@top-g.com\r\n        </Text>\r\n      </View>\r\n      <View style={Styles.NameContainer}>\r\n        <Text style={Styles.NameText}> Enter your name </Text>\r\n        <TextInput\r\n          style={Styles.NameInput}\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n          value={userName} // its is main prop\r\n          onChangeText={(name) => {\r\n            setUserName(name);\r\n          }}\r\n        />\r\n      </View>\r\n      <View style={Styles.PasswordContainer}>\r\n        <Text style={Styles.PasswordText}> Enter your password </Text>\r\n        <TextInput\r\n          style={Styles.PasswordInput}\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n          secureTextEntry={true}\r\n          value={userPassword}\r\n          onChangeText={(password) => {\r\n            setUserPassword(password);\r\n          }}\r\n        />\r\n      </View>\r\n      <View style={Styles.CheckboxContainer}>\r\n        <Checkbox\r\n          value={agree}\r\n          onValueChange={() => {\r\n            setAgree(!agree);\r\n          }}\r\n          color={agree ? \"#03A9F5\" : undefined}\r\n          style={Styles.Checkbox}\r\n        />\r\n        <Text style={Styles.CheckboxText}>\r\n          i have read and agrees with the TC\r\n        </Text>\r\n      </View>\r\n      <TouchableOpacity\r\n        // disabled= {agree ? false : true}\r\n        disabled={!agree}\r\n        style={[agree ? Styles.LoginButton : Styles.LoginBtnWTColor]}\r\n        onPress={() => {\r\n          Submit();\r\n        }}\r\n      >\r\n        <Text\r\n          style={[agree ? Styles.LoginBtnText : Styles.LoginBtnWTcolorText]}\r\n        >\r\n          Login\r\n        </Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default contact;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}